"
I can parse the callstats generated by the NAT
"
Class {
	#name : #CtrlCallStatTrap,
	#superclass : #CtrlTrap,
	#instVars : [
		'dict'
	],
	#category : #OpenBSCControl
}

{ #category : #creation }
CtrlCallStatTrap class >> isFor: aPath [
	(aPath at: 1) first = 'net' ifFalse: [^false].
	(aPath at: 3) first = 'bsc' ifFalse: [^false].
	(aPath at: 5) first = 'call_stats' ifFalse: [^false].
	(aPath at: 6) first = 'v2' ifFalse: [^false].
	^true

]

{ #category : #creation }
CtrlCallStatTrap class >> with: aMsg [
	^(super with: aMsg)
	    extractMessage;
	    yourself

]

{ #category : #'as yet unclassified' }
CtrlCallStatTrap >> at: aName [
	^dict at: aName

]

{ #category : #'as yet unclassified' }
CtrlCallStatTrap >> extractMessage [
	"Create aliases to avoid the first first second last madness"

	| var data |
	var := msg at: 3.
	dict := Dictionary new.
	dict at: 'nat_id' put: (var at: 2) first.
	dict at: 'bsc_id' put: (var at: 4) first.
	data := msg at: 4.
	data := data subStrings: ','.
	data do: 
		[:each | 
		| split |
		split := each subStrings: '='.
		dict at: split first put: split second]

]
